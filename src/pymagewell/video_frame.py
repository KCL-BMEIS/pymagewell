from dataclasses import dataclass
from datetime import datetime
from typing import Union

from numpy import uint16, uint8
from numpy.typing import NDArray

from pymagewell.conversion import AlphaChannelLocation, convert_grey_bytes_to_array, convert_rgb_bytes_to_array
from pymagewell.pro_capture_device.device_settings import (
    ColourFormat,
    ColourSpace,
    ImageSizeInPixels,
    RGBChannelOrder,
)


@dataclass
class VideoFrameTimestamps:
    buffering_started: datetime
    buffering_complete: datetime
    transfer_started: datetime
    transfer_complete: datetime


@dataclass
class VideoFrame:
    string_buffer: bytes
    dimensions: ImageSizeInPixels
    timestamps: VideoFrameTimestamps
    format: ColourFormat

    def as_array(
        self,
        channel_order: RGBChannelOrder = RGBChannelOrder.BGR,
        alpha_channel_location: AlphaChannelLocation = AlphaChannelLocation.IGNORE,
    ) -> NDArray[Union[uint8, uint16]]:
        """as_array
            Decodes the bytes contained in VideoFrame.string_buffer into a 3D numpy array. Only works for greyscale or
            RGB colour space ColourFormats (i.e. Y8, Y800, GREY, Y16, RGB24, RGB10, RGB15, RGB16, RGBA, ARGB and the
            BGR equivalents). By default, the alpha channel is ignored and the colour channels are in BGR order
            (for compatability with openCV imshow). The dtype of the resulting array is uint8 for all ColourFormats
            apart from BGR10, RGB10 and Y16 which require uint16 values to maintain precision.
        Args:
            channel_order (RGBChannelOrder): The order of the R, G and B channels in the resulting array. Defaults to
                RGBChannelOrder.BGR for compatibility with OpenCV imshow
            alpha_channel_location (AlphaChannelLocation): The position of the alpha channel (if there is one) in the
                resulting array. Defaults to AlphaChannelLocation.IGNORE for compatability with OpenCV imshow - this
                discards any alpha values present in the frame.
        Returns:
            A `ProCaptureEvents` object containing handles to the events generated by the device during frame grabbing.
        """
        if self.format.colour_space == ColourSpace.RGB:
            return convert_rgb_bytes_to_array(
                self.string_buffer,
                self.dimensions,
                self.format,
                output_channel_order=channel_order,
                output_alpha_location=alpha_channel_location,
            )
        elif self.format.colour_space == ColourSpace.GREY:
            return convert_grey_bytes_to_array(self.string_buffer, self.dimensions, self.format)
        else:
            raise NotImplementedError("Can only convert frames in the RGB or greyscale colour spaces to NumPy arrays")
